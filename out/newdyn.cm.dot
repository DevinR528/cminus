digraph ast {
0[label = PGM, shape = ellipse]
1[label = "func main", shape = ellipse]
0 -> 1
2[label = "var source", shape = ellipse]
1 -> 2
3[label = "var target", shape = ellipse]
1 -> 3
4[label = "var cost", shape = ellipse]
1 -> 4
5[label = "var n", shape = ellipse]
1 -> 5
6[label = "var m", shape = ellipse]
1 -> 6
7[label = "var i", shape = ellipse]
1 -> 7
8[label = "var j", shape = ellipse]
1 -> 8
9[label = "assign m", shape = ellipse]
1 -> 9
10[label = "value int 30", shape = ellipse]
9 -> 10
11[label = "assign n", shape = ellipse]
1 -> 11
12[label = "value int 30", shape = ellipse]
11 -> 12
13[label = "assign i", shape = ellipse]
1 -> 13
14[label = "value int 0", shape = ellipse]
13 -> 14
15[label = "while loop", shape = ellipse]
1 -> 15
16[label = "expr BinOp Lt", shape = ellipse]
1 -> 16
17[label = "ident i", shape = ellipse]
16 -> 17
18[label = "ident m", shape = ellipse]
16 -> 18
19[label = "block", shape = ellipse]
1 -> 19
20[label = "assign cost[i*m]", shape = ellipse]
19 -> 20
21[label = "ident i", shape = ellipse]
20 -> 21
22[label = "assign target[i]", shape = ellipse]
19 -> 22
23[label = "expr BinOp Add", shape = ellipse]
22 -> 23
24[label = "ident i", shape = ellipse]
23 -> 24
25[label = "value int 1", shape = ellipse]
23 -> 25
26[label = "assign i", shape = ellipse]
19 -> 26
27[label = "expr BinOp Add", shape = ellipse]
26 -> 27
28[label = "ident i", shape = ellipse]
27 -> 28
29[label = "value int 1", shape = ellipse]
27 -> 29
30[label = "assign j", shape = ellipse]
1 -> 30
31[label = "value int 0", shape = ellipse]
30 -> 31
32[label = "while loop", shape = ellipse]
1 -> 32
33[label = "expr BinOp Lt", shape = ellipse]
1 -> 33
34[label = "ident j", shape = ellipse]
33 -> 34
35[label = "ident n", shape = ellipse]
33 -> 35
36[label = "block", shape = ellipse]
1 -> 36
37[label = "assign cost[j]", shape = ellipse]
36 -> 37
38[label = "ident j", shape = ellipse]
37 -> 38
39[label = "assign target[j]", shape = ellipse]
36 -> 39
40[label = "expr BinOp Mul", shape = ellipse]
39 -> 40
41[label = "value int 2", shape = ellipse]
40 -> 41
42[label = "parenthesis", shape = ellipse]
40 -> 42
43[label = "expr BinOp Add", shape = ellipse]
42 -> 43
44[label = "ident j", shape = ellipse]
43 -> 44
45[label = "value int 1", shape = ellipse]
43 -> 45
46[label = "assign j", shape = ellipse]
36 -> 46
47[label = "expr BinOp Add", shape = ellipse]
46 -> 47
48[label = "ident j", shape = ellipse]
47 -> 48
49[label = "value int 1", shape = ellipse]
47 -> 49
50[label = "assign i", shape = ellipse]
1 -> 50
51[label = "value int 1", shape = ellipse]
50 -> 51
52[label = "while loop", shape = ellipse]
1 -> 52
53[label = "expr BinOp Lt", shape = ellipse]
1 -> 53
54[label = "ident i", shape = ellipse]
53 -> 54
55[label = "ident m", shape = ellipse]
53 -> 55
56[label = "block", shape = ellipse]
1 -> 56
57[label = "assign j", shape = ellipse]
56 -> 57
58[label = "value int 1", shape = ellipse]
57 -> 58
59[label = "while loop", shape = ellipse]
56 -> 59
60[label = "expr BinOp Lt", shape = ellipse]
56 -> 60
61[label = "ident j", shape = ellipse]
60 -> 61
62[label = "ident n", shape = ellipse]
60 -> 62
63[label = "block", shape = ellipse]
56 -> 63
64[label = "assign cost[i*m+j]", shape = ellipse]
63 -> 64
65[label = "ident cost[(i - 1)*m+j - 1]", shape = ellipse]
64 -> 65
66[label = "if call", shape = ellipse]
63 -> 66
67[label = "expr BinOp Ne", shape = ellipse]
66 -> 67
68[label = "ident target[i]", shape = ellipse]
67 -> 68
69[label = "ident source[j]", shape = ellipse]
67 -> 69
70[label = "assign cost[i*m+j]", shape = ellipse]
66 -> 70
71[label = "expr BinOp Add", shape = ellipse]
70 -> 71
72[label = "ident cost[i*m+j]", shape = ellipse]
71 -> 72
73[label = "value int 1", shape = ellipse]
71 -> 73
74[label = "if call", shape = ellipse]
63 -> 74
75[label = "expr BinOp Lt", shape = ellipse]
74 -> 75
76[label = "ident cost[(i - 1)*m+j]", shape = ellipse]
75 -> 76
77[label = "ident cost[i*m+j]", shape = ellipse]
75 -> 77
78[label = "assign cost[i*m+j]", shape = ellipse]
74 -> 78
79[label = "expr BinOp Add", shape = ellipse]
78 -> 79
80[label = "ident cost[(i-1)*m+j]", shape = ellipse]
79 -> 80
81[label = "value int 1", shape = ellipse]
79 -> 81
82[label = "if call", shape = ellipse]
63 -> 82
83[label = "expr BinOp Lt", shape = ellipse]
82 -> 83
84[label = "ident cost[i*m+j - 1]", shape = ellipse]
83 -> 84
85[label = "ident cost[i*m+j]", shape = ellipse]
83 -> 85
86[label = "assign cost[i*m+j]", shape = ellipse]
82 -> 86
87[label = "expr BinOp Add", shape = ellipse]
86 -> 87
88[label = "ident cost[i*m+j - 1]", shape = ellipse]
87 -> 88
89[label = "value int 1", shape = ellipse]
87 -> 89
90[label = "assign j", shape = ellipse]
63 -> 90
91[label = "expr BinOp Add", shape = ellipse]
90 -> 91
92[label = "ident j", shape = ellipse]
91 -> 92
93[label = "value int 1", shape = ellipse]
91 -> 93
94[label = "assign i", shape = ellipse]
56 -> 94
95[label = "expr BinOp Add", shape = ellipse]
94 -> 95
96[label = "ident i", shape = ellipse]
95 -> 96
97[label = "value int 1", shape = ellipse]
95 -> 97
98[label = "write call", shape = ellipse]
1 -> 98
99[label = "ident m", shape = ellipse]
98 -> 99
100[label = "write call", shape = ellipse]
1 -> 100
101[label = "ident n", shape = ellipse]
100 -> 101
102[label = "write call", shape = ellipse]
1 -> 102
103[label = "ident cost[899]", shape = ellipse]
102 -> 103
104[label = "exit", shape = ellipse]
1 -> 104
}