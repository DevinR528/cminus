/** $awkdoc$ ********************************************************

A version of quicksort for testing recursion: reads and sorts
19 CHARACTERs.

** $endawk$ ********************************************************/

linked fn printf<T>(_fmt: cstr, _val: T);
linked fn scanf<T>(_fmt: cstr, _val: *T);

const NULL: int = 0;
const mut A: [21; int] = [0; 21];

fn  readarray()
{
  printf("A?", NULL);
  let i = 1;
    let tmp = 0;
  while (i < 20)
    {
      printf("%d\n", i);
      scanf("%d", &tmp);
      A[i] = tmp;
      i += 1;
    }
}

fn  writearray(B: [21; int])
{
    printf("A:", NULL);
  let i = 0;
  while (i <= 20)
    {
      printf("%d\n", B[i]);
      i = i + 1;
    }
}

fn partition(B: [21; int], p: int, r: int): int {
  let x = B[p];
  printf("xxx %d\n", x);
  let i = p - 1;
  let j = r + 1;
  while (1)
    {
      j = j-1;
      while (B[j] > x)
        {
          j = j-1;
        }
      i = i+1;
      while (B[i] < x)
        {
          i = i+1;
        }
      if (i < j) {
            let t = B[i];
            B[i] = B[j];
            B[j] = t;
      }
      else {
          return j;
        }
    }
}

fn quicksort(Z: [21; int], p: int, r: int): int
{
  if (p < r)
      {
        let q = partition(Z,p,r);
        r = quicksort(Z,p,q);
        r = quicksort(Z,q+1,r);
      }
  return 0;
}

fn main()
{
//   A[0] = 0; A[20] = 100;
//   readarray();
    let a = [0; 21]
  printf("After read %d\n", a[0]);
  quicksort(a,1,19);
  writearray(a);
}
