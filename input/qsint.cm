/** $awkdoc$ ********************************************************

A version of quicksort for testing recursion: reads and sorts
19 CHARACTERs.

** $endawk$ ********************************************************/

linked fn printf<T>(_fmt: cstr, _val: T);
linked fn scanf<T>(_fmt: cstr, _val: *T);

const NULL: int = 0;
const mut A: [21; int] = [0; 21];

fn  readarray() {
  printf("A?", NULL);
  let i = 1;
  let tmp = 0;
  while (i < 20) {
    printf("index %d: ", i);
    scanf("%d", &tmp);
    A[i] = tmp;
    i += 1;
  }
}

fn writearray() {
  printf("A:", NULL);
  let i = 0;
  while (i <= 20) {
    printf("%d\n", A[i]);
    i = i + 1;
  }
}

fn partition(p: int, r: int): int {
  let x = A[p];
  let i = p - 1;
  let j = r + 1;
  while (1) {
      j = j-1;
      while (A[j] > x) {
        j = j-1;
      }

      i = i+1;
      while (A[i] < x) {
        i = i+1;
      }
      if (i < j) {
        let t = A[i];
        A[i] = A[j];
        A[j] = t;
      } else {
        return j;
      }
  }
}

fn quicksort(p: int, r: int): int {
  if (p < r) {
     let q = partition(p, r);
     r = quicksort(p, q);
     r = quicksort(q + 1, r);
  }
  return 0;
}

fn main() {
  //   A[0] = 0; A[20] = 100;
  readarray();
  printf("After read %d\n", A[0]);
  quicksort(1,19);
  writearray();
}
