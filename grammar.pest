program = { SOI ~ "\n"* ~ (decl)* ~ EOI }

decl = { (func_decl | var_decl | adt_decl) }

func_decl = { type_ ~ ident ~ LP ~ (param_list)? ~ RP ~ LBR ~ ( (var_decl) | (stmt) )* ~ RBR }

param_list = { param ~ (CM ~ param)* }

param = { type_ ~ var_name }

var_decl = { type_ ~ var_name ~ (CM ~ var_name)* ~ SC }

adt_decl = { STRUCT ~ ident ~ LBR ~ (field)+ ~ RBR ~ SC }

field = { param ~ SC }

var_name = { addrof? ~ ident ~ (LBK ~ integer ~ RBK)* }

type_ = { (INT | CHAR | FLOAT | VOID | STRUCT ~ ident) ~ addrof? }

stmt = {
    assing
    | io_stmt
    | call_stmt
    | if_stmt
    | while_stmt
    | ret_stmt
    | exit_stmt
    | block_stmt
}

assing = { expr ~ ASSIGN ~ (struct_assign | arr_init | expr) ~ SC }

call_stmt = { ident ~ LP ~ (arg_list)? ~ RP ~ SC }

if_stmt = { IF ~ LP ~ expr ~ RP ~ block_stmt ~ (ELSE ~ block_stmt)? }

while_stmt = { WHILE ~ LP ~ expr ~ RP ~ stmt }

io_stmt = {
    (READ ~ LP ~ variable ~ RP ~ SC)
    | (WRITE ~ LP ~ (expr | string) ~ RP ~ SC)
}

ret_stmt = { RETURN ~ expr ~ SC }

exit_stmt = { EXIT ~ SC }

block_stmt = { LBR ~ (stmt)* ~ RBR }

struct_assign = { ident ~ LBR ~ field_expr ~ (CM ~ field_expr)* ~ CM? ~ RBR }

field_expr = { ident ~ COLON ~ (arr_init | expr) }

expr = { term ~ (op ~ term)* }

term = {
    variable ~ !LP
    | const_
    | ident ~ LP ~ (arg_list)? ~ RP
    | NOT ~ expr
    | LP ~ expr ~ RP
}

arr_init = { (LBR ~ expr ~ (CM ~ expr)* ~ CM? ~ RBR) | LBR ~ arr_init ~ (CM ~ arr_init)* ~ CM? ~ RBR }

arg_list = { expr ~ (CM ~ expr)*}

variable = {
    deref? ~ ident ~ (LBK ~ expr ~ RBK)+
    | deref? ~ ident
}

const_ = { decimal | charstr | integer }

op = {
    ARROW
    |DOT
    | PLUS
    | SUB
    | MUL
    | DIV
    | EQ
    | NE
    | LE
    | LT
    | GE
    | GT
    | OR
    | AND
}

deref = { AMP | (MUL)* }

addrof = { (MUL)* }

integer = @{ ASCII_DIGIT+ }

decimal = @{ ASCII_DIGIT+ ~ DOT ~ ASCII_DIGIT* }

ident = @{ ASCII_ALPHA+ ~ (ASCII_ALPHANUMERIC | "_")* }

charstr = @{ SQ ~ ( SQ ~ SQ | (!SQ ~ ANY) )* ~ SQ }

string = @{ DQ ~ ( DQ ~ DQ | (!DQ ~ ANY) )* ~ DQ }

keyword = {
    CHAR | ELSE | EXIT | FLOAT | IF | INT | READ | RETURN | VOID | WHILE | WRITE
}

// keywords
CHAR = { "char" }
ELSE = { "else" }
EXIT = { "exit" }
FLOAT = { "float" }
IF = { "if" }
INT = { "int" }
READ = { "read" }
RETURN = { "return" }
STRUCT = { "struct" }
VOID = { "void" }
WHILE = { "while" }
WRITE = { "write" }

// operations
PLUS = { "+" }
SUB = { "-" }
MUL = { "*" }
DIV = { "/" }
ASSIGN = { "=" }

// logical
EQ = { "==" }
NE = { "!=" }
GE = { ">=" }
GT = { ">" }
LE = { "<=" }
LT = { "<" }
NOT = { "!" }
AND = { "&&" }
OR = { "||" }

// misc
AMP = { "&" }
ARROW = { "->" }


LBK = { "[" }
RBK = { "]" }
LBR = { "{" }
RBR = { "}" }
LP = { "(" }
RP = { ")" }
CM = { "," }
DOT = { "." }
SC = { ";" }
COLON = { ":" }
SQ = { "'" }
DQ = { "\"" }

COMMENT = _{
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
    | "//" ~ (!"\n" ~ ANY)*
}

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
