program = { SOI ~ "\n"* ~ (decl)* ~ EOI }

decl = { (func_decl | trait_decl | trait_impl | var_decl | adt_decl) }

func_decl = { type_ ~ ident ~ generic ~ LP ~ (param_list)? ~ RP ~ LBR ~ ( (var_decl) | (stmt) )* ~ RBR }

trait_decl = { TRAIT ~ ident ~ generic ~ LBR ~ trait_item ~ RBR }

trait_impl = { IMPL ~ ident ~ generic ~ LBR ~ func_decl ~ RBR }

var_decl = { type_ ~ var_name ~ (CM ~ var_name)* ~ SC }

adt_decl = {
    (STRUCT ~ ident ~ generic ~ LBR ~ (field)+ ~ RBR)
    | (ENUM ~ ident ~ generic ~ LBR ~ (variant ~ (CM ~ variant)* ~ CM?)+ ~ RBR)
}

param_list = { param ~ (CM ~ param)* ~ CM?}

param = { type_ ~ var_name }

trait_item = {
    (type_ ~ ident ~ generic ~ LP ~ (param_list)? ~ RP ~ SC)
    | func_decl
}

field = { param ~ SC }

variant = { ident ~ (LP ~ (type_ ~ (CM ~ type_)* ~ CM?)? ~ RP)? }

var_name = { addrof? ~ ident ~ (LBK ~ integer ~ RBK)* }

stmt = {
    io_stmt
    | call_stmt
    | ret_stmt
    | exit_stmt
    | math_assign
    | assign
    | if_stmt
    | while_stmt
    | match_stmt
    | block_stmt
}

math_assign = { expr ~ SC }

assign = { expr ~ ASSIGN ~ (struct_assign | arr_init | expr) ~ SC }

call_stmt = { ident ~ type_args ~ LP ~ (arg_list)? ~ RP ~ SC }

if_stmt = { IF ~ LP ~ expr ~ RP ~ ((block_stmt ~ (ELSE ~ block_stmt)?) | SC) }

while_stmt = { WHILE ~ LP ~ expr ~ RP ~ stmt }

match_stmt = { MATCH ~ expr ~ LBR ~ (arm)* ~ RBR ~ SC? }

io_stmt = {
    (READ ~ LP ~ expr ~ RP ~ SC)
    | (WRITE ~ LP ~ (expr | string) ~ RP ~ SC)
}

ret_stmt = { RETURN ~ expr ~ SC }

exit_stmt = { EXIT ~ SC }

block_stmt = { LBR ~ (stmt)* ~ RBR }

arm = {  (struct_assign | arr_init | expr) ~ ARROW ~ block_stmt ~ CM? }

enum_init = { ident ~ "::" ~ ident ~ (LP ~ (expr ~ (CM ~ expr)* ~ CM?)? ~ RP)? }

struct_assign = { ident ~ LBR ~ field_expr ~ (CM ~ field_expr)* ~ CM? ~ RBR }

field_expr = { ident ~ COLON ~ (struct_assign | arr_init | expr) }

expr = { term ~ (op ~ term)* }

term = {
    ident ~ type_args ~ LP ~ (arg_list)? ~ RP
    | "<" ~ generic ~ "::" ~ ident ~ ">" ~ LP ~ (arg_list)? ~ RP
    | const_
    | enum_init
    | variable ~ !LP
    | logic_bit ~ expr
    | LP ~ expr ~ RP
}

type_args = { ("::<" ~ type_ ~ (CM ~ type_)* ~ ">")? }

arr_init = { (LBR ~ expr ~ (CM ~ expr)* ~ CM? ~ RBR) | LBR ~ arr_init ~ (CM ~ arr_init)* ~ CM? ~ RBR }

arg_list = { (struct_assign | arr_init | expr) ~ (CM ~ (struct_assign | arr_init | expr))*}

variable = {
    deref? ~ ident ~ (LBK ~ expr ~ RBK)+
    | deref? ~ ident
}

const_ = { decimal | charstr | string | integer | TRUE | FALSE }

op = {
    ARROW | DOT

    | ADDASSIGN | SUBASSIGN

    | MUL | DIV | REM
    | PLUS| SUB

    | BLSF | BRSF

    | LE | LT | GE | GT

    | EQ | NE

    | BAND | BXOR | BOR

    | OR | AND
}

type_ = {
    (
        BOOL
        | INT
        | CHAR
        | FLOAT
        | VOID
        | STRUCT ~ ident ~ generic
        | ENUM ~ ident ~ generic
        | bound
        | (!keyword ~ ident)
    ) ~ addrof?
}

generic = { ("<" ~ type_ ~ (CM ~ type_)* ~ ">")? }

bound = { ((!keyword ~ ident) ~ ":" ~ (!keyword ~ ident)) }

deref = { AMP | (MUL)* }

addrof = { (MUL)* }

logic_bit = { NOT | BNOT }

integer = @{ ASCII_DIGIT+ }

decimal = @{ ASCII_DIGIT+ ~ DOT ~ ASCII_DIGIT* }

ident = @{ !("return"|"if") ~ ASCII_ALPHA+ ~ (ASCII_ALPHANUMERIC | "_")* }

charstr = @{ SQ ~ ( SQ ~ SQ | (!SQ ~ ANY) )* ~ SQ }

string = @{ DQ ~ ( DQ ~ DQ | (!DQ ~ ANY) )* ~ DQ }

keyword = {
    CHAR | ELSE | EXIT | FLOAT | IF | INT | READ | RETURN | TRAIT | IMPL | STRUCT | ENUM | VOID | WHILE | WRITE | MATCH | TRUE | FALSE
}

// keywords
CHAR = { "char" }
ELSE = { "else" }
EXIT = { "exit" }
FLOAT = { "float" }
IF = { "if" }
INT = { "int" }
READ = { "read" }
RETURN = { "return" }
STRUCT = { "struct" }
ENUM = { "enum" }
TRAIT = { "trait" }
IMPL = { "impl" }
VOID = { "void" }
WHILE = { "while" }
WRITE = { "write" }
MATCH = { "match" }
TRUE = { "true" }
FALSE = { "false" }
BOOL = { "bool" }

// operations
PLUS = { "+" }
SUB = { "-" }
MUL = { "*" }
DIV = { "/" }
REM = { "%" }
ASSIGN = { "=" }
ADDASSIGN = { "+=" }
SUBASSIGN = { "-=" }

// logical
EQ = { "==" }
NE = { "!=" }
GE = { ">=" }
GT = { ">" }
LE = { "<=" }
LT = { "<" }
NOT = { "!" }
AND = { "&&" }
OR = { "||" }

// bitwise
BAND = { "& " }
BOR = { "| " }
BXOR = { "^" }
BNOT = { "~" }
BLSF = { "<<" }
BRSF = { ">>" }

// misc
AMP = { "&" }
ARROW = { "->" }


LBK = { "[" }
RBK = { "]" }
LBR = { "{" }
RBR = { "}" }
LP = { "(" }
RP = { ")" }
CM = { "," }
DOT = { "." }
SC = { ";" }
COLON = { ":" }
SQ = { "'" }
DQ = { "\"" }

COMMENT = _{
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
    | "//" ~ (!"\n" ~ ANY)*
}

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
