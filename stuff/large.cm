fn set_idx(idx: int,  y: [3; int]): int {
    return y[idx];
}

trait add<T> {
    fn add(a: T, b: T): T;
}

impl add<int> {
    fn add(a: int, b: int): int {
        return a + b;
    }
}

fn add4(x: int,  y: int): int {
    return x + y;
}

struct bar {
    field: char,
    field_two: int,
    y: [10; int],
}

enum thing {
    a, b, c, d(int), e, f(char), g
}

fn main() {
    let a1 = [0,0,0,0,0];
    a1[1] = 0;
    a1[2] = 9;
    a1[3] = 11;
    a1[4] = 15;
    write(a1[1]);
    write(a1[2]);
    write(a1[3]);
    write(a1[4]);

    let x = [0,0,0];
    let a2 = set_idx(0, x);
    write(a2);
    let b2 = set_idx(1, x);
    write(b2);
    let c2 = set_idx(2, x);
    write(c2);

    let x3 = 10; let y3 = 1;
    let a3 = <<int>::add>(x3, y3);
    write(a3);

    let a4 = add4(1, 1);
    write(a4);

    let x5 = 10;
    let y5 = 5;
    if (x5 > y5) {
        write("bigger");
    } else {
        write("smaller");
    }

    let x6 = 1 + 1;
    let y6 = x6 * 2;
    let z6 = x6 + y6;
    write(z6);

    let x7 = 5;
    let a7 = [0,0,0,0,0];

    write(a7[1]);
    write(a7[2]);
    write(a7[3]);
    write(a7[4]);

    write(x7);

    let y7 = 10;
    a7[0] = y7;
    write(a7[0]);

    let x8 = false;
    write(x8); // prints `false`
    write(true); // prints `true`

}
