linked fn printf<T>(_fmt: cstr, _: T);
linked fn signal(_sig: int, _handler: fn(int));

fn sig_handle(sig: int) {
	if (sig == 4) {
		asm {
			mov 60, %rax; // move syscall number 60 (exit) to rax
			mov 0, %rdi;  // move exit code (should be non zero for failure)
			syscall;     // call it
		};
	}
}

fn assert(val: bool) {
	if (!val) {
		printf("assert failed oops: file [todo] line [todo]\n", 0);
		asm { ud2; }
	}
}

fn main(argc: int) {
	// Capture the crash signal from `ud2` and exit gracefully
	signal(4, sig_handle);

	printf("number of args == %d, the second assert should fail\n", argc);
	assert(argc == 1); // assert passes
	assert(argc == 2); // assert fails but we capture it an exit with 0
}

/* all the signal defs

#define SIGHUP		 1
#define SIGINT		 2
#define SIGQUIT		 3
#define SIGILL		 4
#define SIGTRAP		 5
#define SIGABRT		 6
#define SIGIOT		 6
#define SIGBUS		 7
#define SIGFPE		 8
#define SIGKILL		 9
#define SIGUSR1		10
#define SIGSEGV		11
#define SIGUSR2		12
#define SIGPIPE		13
#define SIGALRM		14
#define SIGTERM		15
#define SIGSTKFLT	16
#define SIGCHLD		17
#define SIGCONT		18
#define SIGSTOP		19
#define SIGTSTP		20
#define SIGTTIN		21
#define SIGTTOU		22
#define SIGURG		23
#define SIGXCPU		24
#define SIGXFSZ		25
#define SIGVTALRM	26
#define SIGPROF		27
#define SIGWINCH	28
#define SIGIO		29
#define SIGPOLL		SIGIO

#define SIGPWR		30
#define SIGSYS		31
#define	SIGUNUSED	31

#define SIGRTMIN	32
#ifndef SIGRTMAX
#define SIGRTMAX	_NSIG
#endif

*/
