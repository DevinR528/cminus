linked fn write<T>(_: T);
linked fn putchar(_: int);

const h0: int = 0x67452301;
const h1: int = 0xefcdab89;
const h2: int = 0x98badcfe;
const h3: int = 0x10325476;

const truth: [2; bool] = [false, true];

const s: [64; int] =
    [7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
     5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
     4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
     6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21];

const K: [64; int] =
    [0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
     0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
     0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
     0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
     0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
     0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
     0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
     0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
     0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
     0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
     0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
     0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
     0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
     0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
     0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
     0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391];

struct digest { A: int, B: int, C: int, D: int }

fn leftrotate(x: int, shift: int): int {
    return (x << shift) + (x >> (32 - shift));
}

fn bnot(x: int, n : int): int {
    let m = n / 2;
    if (n == 1) {
        return 1 - x % 2;
    } else {
        return bnot(x >> m, m) << m + bnot(x, m);
    }
}

fn bxor(x: int, y: int, n : int): int {
    let m = n / 2;
    if (n == 1) {
        return (x + y) % 2;
    } else {
        return bxor(x >> m, y >> m, m) << m + bxor(x, y, m);
    }
}

fn bor(x: int, y: int, n : int): int {
    let m = n / 2;
    if (n == 1) {
        if (x % 2) {
            return 1;
        } else if (y % 2) {
            return 1;
        } else {
            return 0;
        }
        // return x % 2 || y % 2;
    } else {
        return bor(x >> m, y >> m, m) << m + bor(x, y, m);
    }
}

fn band(x: int, y: int, n : int): int {
    let m = n / 2;
    if (n == 1) {
        return (x * y) % 2;
    } else {
        return band(x >> m, y >> m, m) << m + band(x, y, m);
    }
}

// https://en.wikipedia.org/wiki/MD5#Pseudocode

fn md5(_d: *digest, M: [16; int]) {
    let A = h0;
    let B = h1;
    let C = h2;
    let D = h3;

    let i = 0;
    while (i < 64) {
        let F = 0; let g = 0;

        if (i < 16) {
            F = bor(band(B, C, 32), band(bnot(B, 32), D, 32), 32);
            g = (1 * i + 0) % 16;
        } else if (i < 32) {
            F = bor(band(D, B, 32), band(bnot(D, 32), C, 32), 32);
            g = (5 * i + 1) % 16;
        } else if (i < 48) {
            F = bxor(B, bxor(C, D, 32), 32);
            g = (3 * i + 5) % 16;
        } else {
            F = bxor(C, bor(B, bnot(D, 32), 32), 32);
            g = (7 * i + 0) % 16;
        }

        F = F + A + K[i] + M[g];
        A = D;
        D = C;
        C = B;
        B = B + leftrotate(F, s[i]);
        i = i + 1;
    }

    // d.A = d.A + A;
    // d.B = d.B + B;
    // d.C = d.C + C;
    // d.D = d.D + D;
}

fn phex(x: int, _n: int) {
    let ld = x % 16; x = x >> 4;
    let hd = x % 16; x = x >> 4;

    if (hd < 10) { putchar(b'0' + hd); } else { putchar(b'a' + (hd - 10)); }
    if (ld < 10) { putchar(b'0' + ld); } else { putchar(b'a' + (ld - 10)); }

    if (b > 1) {
        phex(x, b - 1);
    }
}

fn main()
{
    let msg =
        [b'T' + ((b'h' + ((b'e' + (b' ' << 8)) << 8)) << 8),
         b'q' + ((b'u' + ((b'i' + (b'c' << 8)) << 8)) << 8),
         b'k' + ((b' ' + ((b'b' + (b'r' << 8)) << 8)) << 8),
         b'o' + ((b'w' + ((b'n' + (b' ' << 8)) << 8)) << 8),
         b'f' + ((b'o' + ((b'x' + (b' ' << 8)) << 8)) << 8),
         b'j' + ((b'u' + ((b'm' + (b'p' << 8)) << 8)) << 8),
         b's' + ((b' ' + ((b'o' + (b'v' << 8)) << 8)) << 8),
         b'e' + ((b'r' + ((b' ' + (b't' << 8)) << 8)) << 8),
         b'h' + ((b'e' + ((b' ' + (b'l' << 8)) << 8)) << 8),
         b'a' + ((b'z' + ((b'y' + (b' ' << 8)) << 8)) << 8),
         b'd' + ((b'o' + ((b'g' + (128 << 8)) << 8)) << 8),
          0  + (( 0  + (( 0  + ( 0  << 8)) << 8)) << 8),
          0  + (( 0  + (( 0  + ( 0  << 8)) << 8)) << 8),
          0  + (( 0  + (( 0  + ( 0  << 8)) << 8)) << 8),
         88  + (( 1  + (( 0  + ( 0  << 8)) << 8)) << 8),
          0  + (( 0  + (( 0  + ( 0  << 8)) << 8)) << 8)];

    let d = digest {A: h0, B: h1, C: h2, D: h3};

    MD5(&d, msg);

    // "9e107d9d-372bb682-6bd81d35-42a419d6"

    phex(d.A, 4); putchar(b'-');
    phex(d.B, 4); putchar(b'-');
    phex(d.C, 4); putchar(b'-');
    phex(d.D, 4); putchar( 10 );

}



