// Generic list data structure with push and constructor "method" for stuff.

linked fn write<T>(_: T);

fn alloc<T>(size: int): *T {
    // TODO
    let x: *T = ??;
    return x;
}

struct list<T> {
    len: int,
    cap: int,
    buf: *T,
}

enum foo { a, b, c }

fn list<T>(int size): list<T> {
    let x = list {
        len: 0,
        cap: size,
        buf: alloc::<T>(size),
    };
    return x;
}

fn push<T>(this: list<T>*, item: T) {
    if (this->cap <= this->len) {
        // allocate ...
    } else {
        this->buf += this->len;
        *this->buf = item;
        this->len += 1;
    }
}

fn main() {
    let x = list::<int>(3);
    push::<int>(&x, 10);

    let y = list::<enum foo>(3);
    // push::<enum foo>(&x, false);

}
