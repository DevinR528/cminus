linked fn write<T>(_: T);

trait add<T> {
	fn add(a: T, b: T): T;
}

impl add<int> {
	fn add(a: int, b: int): int {
		return a + b;
	}
}

fn foo<T: add>(T a, T b,): T {
	return <<T>::add>(a, b);
}

fn main() {
	int x, y;
	x = 0; y = 1;
	// This is direct trait call syntax
	write(<<int>::add>(x, y));
	// Call a function with a bound generic
	write(foo::<int>(x, y));
}
