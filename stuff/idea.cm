// Welcome to the `enum` language!!
//
// Where we use enums for a bunch a shit.

// To consider...
//
//    - Jai's build scripts being built into the `main` file is nice
//    - Macros/some way of compile time meta programing
//    - First class compile time types like Zig/Jai kinda has this too


enum Shape {
	pub color: string,

	Circle { rad: int },
	Rectangle { height: int, width: int },
}

// So here is inheritance
fn area(x: Shape): int {
	match x {
		Shape::Circle { rad } -> {
			return (rad * rad) * 3.141;
		}
		Shape::Rectangle { height, width } -> {
			return height * width;
		}
	}
}

// This would be made really nice with variants as types
fn circumference(x: Shape::Circle): int {
	return x.rad * 2 * 3.141;
}

enum Result<T, E> {
	Ok(E), Err(E)
}

fn maybe_call_circumference(Shape x): Result<int, NotInstanceError?> {
	match x {
		circle @ Shape::Circle { .. } -> {
			// The type of circle is `Shape::Circle`
			return Result::Ok(circumference(circle));
		}
		_ -> {
			return Result::Err(NotInstanceError);
		}
	}
}

// Default struct/enum fields
struct Foo {
	size: int,
	color: string,

	meta: string = "hello",
	// Or           maybe no type?
	meta = "hello": string,
}

// I really like the idea of "compile time" first class types
fn passed_in_type<T: ptr_fam>(it: Type): T {
	printf("%s", it.name); // use just as any other type

	if (it.is_sized()) {
		// Higher Kinded Types ish?? maybe??
		// Since the check on Type would be different I wonder if this would work easily
		return <<T<it>>::ptr_fam>();
	} else {

	}
}

// old parser
//     lexing & parsing:  0.008508331s
//     lexing & parsing:  allocations: 1950 bytes: 151840
//     type checking:     0.001378848s

// new parser + interner
//     lexing & parsing:  0.001438135s
//     lexing & parsing:  allocations: 261 bytes: 83463
